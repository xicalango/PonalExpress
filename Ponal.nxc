
#define LEFT_SENSOR IN_4
#define RIGHT_SENSOR IN_2
#define MIDDLE_SENSOR IN_3

#define LEFT_MOTOR OUT_C
#define RIGHT_MOTOR OUT_A
#define AUX_MOTOR OUT_B


sub Setup()
{

	SetSensorType(LEFT_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(LEFT_SENSOR, IN_MODE_RAW);
	SetSensorType(RIGHT_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(RIGHT_SENSOR, IN_MODE_RAW);
	SetSensorType(MIDDLE_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(MIDDLE_SENSOR, IN_MODE_RAW);

	return;
}


sub FollowLine()
{

//	const int thresholdLeft = 650;
//	const int thresholdMiddle = 661;
//	const int thresholdRight = 641;
	const int thresholdLeft = 500;
	const int thresholdMiddle = 550;
	const int thresholdRight = 540;

	int vLeft;
	int vRight;
	int vMiddle;
	
	string svtmp;

	int speed;	

	while(true)
	{
		vLeft = SensorRaw(LEFT_SENSOR);
		vRight = SensorRaw(RIGHT_SENSOR);
		vMiddle = SensorRaw(MIDDLE_SENSOR);

		speed = 80;

		if(vMiddle > thresholdMiddle)
		{
			speed = 100;
		}
		

		if(vLeft > thresholdLeft)
		{
			OnFwd(RIGHT_MOTOR, speed);
		}
		else
		{
			OnFwd(RIGHT_MOTOR, 40);
		}

		if(vRight > thresholdRight)
		{
			OnFwd(LEFT_MOTOR, speed);
		}
		else
		{
			OnFwd(LEFT_MOTOR, 40);
		}

    svtmp = NumToStr( vLeft );
    TextOut( 0, LCD_LINE1, svtmp );
    svtmp = NumToStr( vMiddle );
    TextOut( 0, LCD_LINE2, svtmp );
    svtmp = NumToStr( vRight );
    TextOut( 0, LCD_LINE3, svtmp );


	}

}


int SV;

task main()
{
	string svStr;
	int t;

	Setup();

  FollowLine();


}


