#define LEFT_SENSOR IN_4
#define RIGHT_SENSOR IN_2
#define MIDDLE_SENSOR IN_3


#define LEFT_MOTOR OUT_C
#define RIGHT_MOTOR OUT_A
#define AUX_MOTOR OUT_B

const int minLeft = 360;
const int minRight = 325;
const int minMid = 322;

const int maxLeft = 430;
const int maxRight = 565;
const int maxMid = 590;

int normalize( const int value, const int min, const int max, const int factor = 100 )
{
	return (factor *(value - min))/max;
}

sub Setup()
{

	SetSensorType(LEFT_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(LEFT_SENSOR, IN_MODE_RAW);
	SetSensorType(RIGHT_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(RIGHT_SENSOR, IN_MODE_RAW);
	SetSensorType(MIDDLE_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(MIDDLE_SENSOR, IN_MODE_RAW);

	return;
}


sub FollowLine()
{

	int vLeft;
	int vRight;
	int vMiddle;
	
	int nLeft;
	int nRight;
	int nMiddle;

	int istValue;

	string strTmp;

	int speedLeft;	
	int speedRight;

	while(true)
	{
    vLeft = SensorRaw(LEFT_SENSOR);
    vRight = SensorRaw(RIGHT_SENSOR);
    vMiddle = SensorRaw(MIDDLE_SENSOR);

		nLeft = normalize( vLeft, minLeft, maxLeft, 500 );
		nRight = normalize( vRight, minRight, maxRight, -500 );
		nMiddle = normalize( vMiddle, minMid, maxMid );

		istValue = nLeft + nRight;
		
		speedLeft = (-istValue + 500) / 10;
		speedRight = (istValue + 500) / 10;

		OnFwd(LEFT_MOTOR, speedLeft);
		OnFwd(RIGHT_MOTOR, speedRight);

    ClearScreen();

      strTmp = NumToStr(vLeft) + " " + NumToStr(vMiddle) + " " + NumToStr(vRight);

	    TextOut(0, LCD_LINE1, strTmp);
	    
	    strTmp = NumToStr(istValue);
	    TextOut(0, LCD_LINE2, strTmp);

	    strTmp = NumToStr(speedLeft) + " " + NumToStr(speedRight);
	    TextOut(0, LCD_LINE3, strTmp);
	    
      strTmp = "  " + NumToStr(nLeft) + " " + NumToStr(nMiddle) + " " + NumToStr(nRight);
      TextOut(0, LCD_LINE4, strTmp);


	}

}


int SV;

task main()
{
	string svStr;
	int t;

	Setup();

  FollowLine();


}


