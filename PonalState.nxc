
#define LEFT_SENSOR IN_4
#define RIGHT_SENSOR IN_2
#define MIDDLE_SENSOR IN_3

#define SONIC_SENSOR IN_1

#define LEFT_MOTOR OUT_C
#define RIGHT_MOTOR OUT_A
#define AUX_MOTOR OUT_B

/*
#define THRESHOLD_LEFT 500
#define THRESHOLD_MIDDLE 500
#define THRESHOLD_RIGHT 560
*/

#define THRESHOLD_LEFT 580
#define THRESHOLD_MIDDLE 590
#define THRESHOLD_RIGHT 630

#define THRESHOLD_SONIC 15

#define FULL_SPEED 100
#define MID_SPEED 50
#define LOW_SPEED 40

#define OBSTACLE_SPEED_L 50
#define OBSTACLE_SPEED_R 70

#define MUTE

enum State
{
 	 None = 0,
     INITIAL = 1,
     DRIVE_FWD = 2,
     SEARCH_LINE = 3,
     CORRECT_TO_LEFT = 4,
     CORRECT_TO_RIGHT = 5,
     EMERG_RIGHT = 6,
     EMERG_LEFT = 7,
     AVOID_OBSTACLE = 8
};

int Tones[] = { 0, 261, 311, 329, 349, 369, 391, 466, 523 };

// true falls sensor Schwarz
bool checkThreshold( const int value, const int threshold )
{
	return value > threshold;
}

bool checkObstacle( const int value )
{
  return value < THRESHOLD_SONIC;
}

State St_INITIAL( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{

	if(checkThreshold(vMiddle, THRESHOLD_MIDDLE)) 
	{
		return DRIVE_FWD;
	}
	else
	{
		return SEARCH_LINE;
	}

}

State St_DRIVE_FWD( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{

  if( checkObstacle(vSonic) )
  {
    return AVOID_OBSTACLE;
  }

	if( !checkThreshold(vMiddle, THRESHOLD_MIDDLE) ) //MITTE WEISS
	{
		return SEARCH_LINE;
	}

	if( checkThreshold(vLeft, THRESHOLD_LEFT) )  //LINKS SCHWARZ
	{
		return CORRECT_TO_LEFT;
	}
	
	if( checkThreshold(vRight, THRESHOLD_RIGHT) ) //RECHTS SCHWARZ
	{
		return CORRECT_TO_RIGHT;
	}

	// nur mitte schwarz

	if( initial ) 
	{
		OnFwd(LEFT_MOTOR, FULL_SPEED);
		OnFwd(RIGHT_MOTOR, FULL_SPEED);
	} 

	return DRIVE_FWD;
}

State St_SEARCH_LINE( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{
  if( checkObstacle(vSonic) )
  {
    return AVOID_OBSTACLE;
  }

	if( checkThreshold(vMiddle, THRESHOLD_MIDDLE) ) //MITTE Schwarz
	{
		return DRIVE_FWD;
	}

	if( checkThreshold(vLeft, THRESHOLD_LEFT) )  //LINKS SCHWARZ
	{
		return EMERG_RIGHT;
	}
	
	if( checkThreshold(vRight, THRESHOLD_RIGHT) ) //RECHTS SCHWARZ
	{
		return EMERG_LEFT;
	}

	if( initial ) 
	{
    OnFwd( RIGHT_MOTOR, FULL_SPEED );
    OnFwd( LEFT_MOTOR, LOW_SPEED );
	}

	return SEARCH_LINE;
}

State St_CORRECT_TO_LEFT( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{

  if( checkObstacle(vSonic) )
  {
    return AVOID_OBSTACLE;
  }
  
	if( !checkThreshold(vMiddle, THRESHOLD_MIDDLE) || checkThreshold(vRight, THRESHOLD_RIGHT) ) //MITTE WEISS oder rechts schwarz
	{
		return INITIAL;
	}

	if( !checkThreshold(vLeft, THRESHOLD_LEFT) )  //LINKS SCHWARZ
	{
		return DRIVE_FWD;
	}
	
	if( initial ) 
	{
		OnFwd(RIGHT_MOTOR, FULL_SPEED);
		OnFwd(LEFT_MOTOR, MID_SPEED);
	} 

	return CORRECT_TO_LEFT;
}

State St_CORRECT_TO_RIGHT( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{
  if( checkObstacle(vSonic) )
  {
    return AVOID_OBSTACLE;
  }

	if( !checkThreshold(vMiddle, THRESHOLD_MIDDLE) || checkThreshold(vLeft, THRESHOLD_LEFT) ) //MITTE WEISS oder links schwarz
	{
		return INITIAL;
	}

	if( !checkThreshold(vRight, THRESHOLD_RIGHT) )  //RECHTS SCHWARZ
	{
		return DRIVE_FWD;
	}
	
	if( initial ) 
	{
		OnFwd(RIGHT_MOTOR, MID_SPEED);
		OnFwd(LEFT_MOTOR, FULL_SPEED);
	} 

	return CORRECT_TO_RIGHT;

}

State St_EMERG_RIGHT( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{
  if( checkObstacle(vSonic) )
  {
    return AVOID_OBSTACLE;
  }

	if( checkThreshold(vMiddle, THRESHOLD_MIDDLE)  ) //MITTE WEISS oder rechts schwarz
	{
		return DRIVE_FWD;
	}
	
	if( initial ) 
	{
		OnFwd(RIGHT_MOTOR, FULL_SPEED);
		OnFwd(LEFT_MOTOR, LOW_SPEED);
	} 

	return EMERG_RIGHT;
}

State St_EMERG_LEFT( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{
  if( checkObstacle(vSonic) )
  {
    return AVOID_OBSTACLE;
  }

	if( checkThreshold(vMiddle, THRESHOLD_MIDDLE)  ) //MITTE WEISS oder rechts schwarz
	{
		return DRIVE_FWD;
	}
	
	if( initial ) 
	{
		OnFwd(RIGHT_MOTOR, LOW_SPEED);
		OnFwd(LEFT_MOTOR, FULL_SPEED);
	} 

	return EMERG_LEFT;
}

State St_AVOID_OBSTACLE( const int vLeft, const int vMiddle, const int vRight, const int vSonic, const bool initial )
{

      int measureNew;


      if( !checkObstacle(vSonic) )
      {
       return INITIAL;
      }

      OnFwd( RIGHT_MOTOR, 0);
      OnFwd( LEFT_MOTOR, 0);
      
      Wait(500);

      OnRev( RIGHT_MOTOR, FULL_SPEED );
      OnFwd( LEFT_MOTOR, FULL_SPEED );

      Wait(200);
      
      OnFwd( RIGHT_MOTOR, OBSTACLE_SPEED_R );
      OnFwd( LEFT_MOTOR, OBSTACLE_SPEED_L );
      
      do
      {
        measureNew = SensorRaw( MIDDLE_SENSOR );

      } while( !checkThreshold( measureNew, THRESHOLD_MIDDLE) );

      return AVOID_OBSTACLE;
}


State StateDispatch(const int vLeft, const int vRight, const int vMiddle, const int vSonic, const State currentState, const State lastState)
{

	const bool initial = lastState != currentState;

	switch(currentState)
	{

		case INITIAL:
			return St_INITIAL(vLeft, vMiddle, vRight, vSonic, initial);

	    case DRIVE_FWD:
			return St_DRIVE_FWD(vLeft, vMiddle, vRight, vSonic, initial);

	    case SEARCH_LINE:
			return St_SEARCH_LINE(vLeft, vMiddle, vRight, vSonic, initial);

	    case CORRECT_TO_LEFT:
			return St_CORRECT_TO_LEFT(vLeft, vMiddle, vRight, vSonic, initial);

	    case CORRECT_TO_RIGHT:
			return St_CORRECT_TO_RIGHT(vLeft, vMiddle, vRight, vSonic, initial);

	    case EMERG_RIGHT:
			return St_EMERG_RIGHT(vLeft, vMiddle, vRight, vSonic, initial);

	    case EMERG_LEFT:
			return St_EMERG_LEFT(vLeft, vMiddle, vRight, vSonic, initial);
			
		case AVOID_OBSTACLE:
			return St_AVOID_OBSTACLE(vLeft, vMiddle, vRight, vSonic, initial);

	}
	 


	return currentState;

}

sub StateMachine(State initialState)
{

	State currentState = initialState;
	State lastState = None;

  string strTmp;

	while(true)
	{

		const int vLeft = SensorRaw(LEFT_SENSOR);
		const int vRight = SensorRaw(RIGHT_SENSOR);
		const int vMiddle = SensorRaw(MIDDLE_SENSOR);
		
		const int vSonic = SensorUS(SONIC_SENSOR);
		
    ClearScreen();

    strTmp = NumToStr(vLeft) + " " + NumToStr(vMiddle) + " " + NumToStr(vRight);
    TextOut(0, LCD_LINE1, strTmp);
    
    strTmp = NumToStr(vSonic);
    TextOut(0, LCD_LINE2, strTmp);

    strTmp = NumToStr(currentState);
    TextOut(0, LCD_LINE3, strTmp);

		State newState = StateDispatch( vLeft, vRight, vMiddle, vSonic, currentState, lastState );

		lastState = currentState;
		currentState = newState;
		
		
#ifndef MUTE
		PlayTone( Tones[currentState] * 2, 50 );
#endif //MUTE




	}

  return;
}

sub Setup()
{

	SetSensorType(LEFT_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(LEFT_SENSOR, IN_MODE_RAW);
	SetSensorType(RIGHT_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(RIGHT_SENSOR, IN_MODE_RAW);
	SetSensorType(MIDDLE_SENSOR, IN_TYPE_LIGHT_ACTIVE);
	SetSensorMode(MIDDLE_SENSOR, IN_MODE_RAW);
	
	SetSensorUltrasonic( SONIC_SENSOR );
	
	return;
}

task main()
{
	Setup();

	StateMachine(INITIAL);
}


